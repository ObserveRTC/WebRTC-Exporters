/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserMediaError extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8209323405239877802L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserMediaError\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"callName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"peerConnectionUUID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserMediaError> ENCODER =
      new BinaryMessageEncoder<UserMediaError>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserMediaError> DECODER =
      new BinaryMessageDecoder<UserMediaError>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserMediaError> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserMediaError> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserMediaError> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserMediaError>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserMediaError to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserMediaError from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserMediaError instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserMediaError fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String mediaUnitId;
   private java.lang.String callName;
   private java.lang.String userId;
   private java.lang.String browserId;
   private java.lang.String peerConnectionUUID;
   private java.lang.String message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserMediaError() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The new value for mediaUnitId
   * @param callName The new value for callName
   * @param userId The new value for userId
   * @param browserId The new value for browserId
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param message The new value for message
   */
  public UserMediaError(java.lang.String mediaUnitId, java.lang.String callName, java.lang.String userId, java.lang.String browserId, java.lang.String peerConnectionUUID, java.lang.String message) {
    this.mediaUnitId = mediaUnitId;
    this.callName = callName;
    this.userId = userId;
    this.browserId = browserId;
    this.peerConnectionUUID = peerConnectionUUID;
    this.message = message;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return callName;
    case 2: return userId;
    case 3: return browserId;
    case 4: return peerConnectionUUID;
    case 5: return message;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 1: callName = value$ != null ? value$.toString() : null; break;
    case 2: userId = value$ != null ? value$.toString() : null; break;
    case 3: browserId = value$ != null ? value$.toString() : null; break;
    case 4: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 5: message = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The value of the 'mediaUnitId' field.
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'callName' field.
   * @return The value of the 'callName' field.
   */
  public java.lang.String getCallName() {
    return callName;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'browserId' field.
   * @return The value of the 'browserId' field.
   */
  public java.lang.String getBrowserId() {
    return browserId;
  }



  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public java.lang.String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }



  /**
   * Creates a new UserMediaError RecordBuilder.
   * @return A new UserMediaError RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.UserMediaError.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.UserMediaError.Builder();
  }

  /**
   * Creates a new UserMediaError RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserMediaError RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.UserMediaError.Builder newBuilder(org.observertc.webrtc.schemas.reports.UserMediaError.Builder other) {
    if (other == null) {
      return new org.observertc.webrtc.schemas.reports.UserMediaError.Builder();
    } else {
      return new org.observertc.webrtc.schemas.reports.UserMediaError.Builder(other);
    }
  }

  /**
   * Creates a new UserMediaError RecordBuilder by copying an existing UserMediaError instance.
   * @param other The existing instance to copy.
   * @return A new UserMediaError RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.UserMediaError.Builder newBuilder(org.observertc.webrtc.schemas.reports.UserMediaError other) {
    if (other == null) {
      return new org.observertc.webrtc.schemas.reports.UserMediaError.Builder();
    } else {
      return new org.observertc.webrtc.schemas.reports.UserMediaError.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserMediaError instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserMediaError>
    implements org.apache.avro.data.RecordBuilder<UserMediaError> {

    private java.lang.String mediaUnitId;
    private java.lang.String callName;
    private java.lang.String userId;
    private java.lang.String browserId;
    private java.lang.String peerConnectionUUID;
    private java.lang.String message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.UserMediaError.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.message)) {
        this.message = data().deepCopy(fields()[5].schema(), other.message);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing UserMediaError instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.UserMediaError other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.message)) {
        this.message = data().deepCopy(fields()[5].schema(), other.message);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'callName' field.
      * @return The value.
      */
    public java.lang.String getCallName() {
      return callName;
    }


    /**
      * Sets the value of the 'callName' field.
      * @param value The value of 'callName'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder setCallName(java.lang.String value) {
      validate(fields()[1], value);
      this.callName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'callName' field has been set.
      * @return True if the 'callName' field has been set, false otherwise.
      */
    public boolean hasCallName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'callName' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder clearCallName() {
      callName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder setUserId(java.lang.String value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserId' field.
      * @return The value.
      */
    public java.lang.String getBrowserId() {
      return browserId;
    }


    /**
      * Sets the value of the 'browserId' field.
      * @param value The value of 'browserId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder setBrowserId(java.lang.String value) {
      validate(fields()[3], value);
      this.browserId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'browserId' field has been set.
      * @return True if the 'browserId' field has been set, false otherwise.
      */
    public boolean hasBrowserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'browserId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder clearBrowserId() {
      browserId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public java.lang.String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder setPeerConnectionUUID(java.lang.String value) {
      validate(fields()[4], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder setMessage(java.lang.String value) {
      validate(fields()[5], value);
      this.message = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.UserMediaError.Builder clearMessage() {
      message = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserMediaError build() {
      try {
        UserMediaError record = new UserMediaError();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[0]);
        record.callName = fieldSetFlags()[1] ? this.callName : (java.lang.String) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.String) defaultValue(fields()[2]);
        record.browserId = fieldSetFlags()[3] ? this.browserId : (java.lang.String) defaultValue(fields()[3]);
        record.peerConnectionUUID = fieldSetFlags()[4] ? this.peerConnectionUUID : (java.lang.String) defaultValue(fields()[4]);
        record.message = fieldSetFlags()[5] ? this.message : (java.lang.String) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserMediaError>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserMediaError>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserMediaError>
    READER$ = (org.apache.avro.io.DatumReader<UserMediaError>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

    if (this.callName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callName);
    }

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    if (this.browserId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserId);
    }

    if (this.peerConnectionUUID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.peerConnectionUUID);
    }

    out.writeString(this.message);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.callName = null;
      } else {
        this.callName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserId = null;
      } else {
        this.browserId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.peerConnectionUUID = null;
      } else {
        this.peerConnectionUUID = in.readString();
      }

      this.message = in.readString();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callName = null;
          } else {
            this.callName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserId = null;
          } else {
            this.browserId = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.peerConnectionUUID = null;
          } else {
            this.peerConnectionUUID = in.readString();
          }
          break;

        case 5:
          this.message = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










