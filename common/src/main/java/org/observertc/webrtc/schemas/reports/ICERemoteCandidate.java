/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ICERemoteCandidate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2822852519976487004L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ICERemoteCandidate\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"callName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"candidateId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"candidateType\",\"type\":{\"type\":\"enum\",\"name\":\"CandidateType\",\"symbols\":[\"HOST\",\"PRFLX\",\"RELAY\",\"SRFLX\",\"UNKNOWN\",\"NULL\"]}},{\"name\":\"deleted\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"ipLSH\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isRemote\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"port\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"priority\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"protocol\",\"type\":{\"type\":\"enum\",\"name\":\"TransportProtocol\",\"symbols\":[\"UDP\",\"TCP\",\"UNKNOWN\",\"NULL\"]},\"default\":\"UNKNOWN\"},{\"name\":\"transportID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ICERemoteCandidate> ENCODER =
      new BinaryMessageEncoder<ICERemoteCandidate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ICERemoteCandidate> DECODER =
      new BinaryMessageDecoder<ICERemoteCandidate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ICERemoteCandidate> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ICERemoteCandidate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ICERemoteCandidate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ICERemoteCandidate>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ICERemoteCandidate to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ICERemoteCandidate from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ICERemoteCandidate instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ICERemoteCandidate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String mediaUnitId;
   private java.lang.String callName;
   private java.lang.String userId;
   private java.lang.String browserId;
   private java.lang.String peerConnectionUUID;
   private java.lang.String candidateId;
   private org.observertc.webrtc.schemas.reports.CandidateType candidateType;
   private java.lang.Boolean deleted;
   private java.lang.String ipLSH;
   private java.lang.Boolean isRemote;
   private java.lang.Integer port;
   private java.lang.Long priority;
   private org.observertc.webrtc.schemas.reports.TransportProtocol protocol;
   private java.lang.String transportID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ICERemoteCandidate() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The new value for mediaUnitId
   * @param callName The new value for callName
   * @param userId The new value for userId
   * @param browserId The new value for browserId
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param candidateId The new value for candidateId
   * @param candidateType The new value for candidateType
   * @param deleted The new value for deleted
   * @param ipLSH The new value for ipLSH
   * @param isRemote The new value for isRemote
   * @param port The new value for port
   * @param priority The new value for priority
   * @param protocol The new value for protocol
   * @param transportID The new value for transportID
   */
  public ICERemoteCandidate(java.lang.String mediaUnitId, java.lang.String callName, java.lang.String userId, java.lang.String browserId, java.lang.String peerConnectionUUID, java.lang.String candidateId, org.observertc.webrtc.schemas.reports.CandidateType candidateType, java.lang.Boolean deleted, java.lang.String ipLSH, java.lang.Boolean isRemote, java.lang.Integer port, java.lang.Long priority, org.observertc.webrtc.schemas.reports.TransportProtocol protocol, java.lang.String transportID) {
    this.mediaUnitId = mediaUnitId;
    this.callName = callName;
    this.userId = userId;
    this.browserId = browserId;
    this.peerConnectionUUID = peerConnectionUUID;
    this.candidateId = candidateId;
    this.candidateType = candidateType;
    this.deleted = deleted;
    this.ipLSH = ipLSH;
    this.isRemote = isRemote;
    this.port = port;
    this.priority = priority;
    this.protocol = protocol;
    this.transportID = transportID;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return callName;
    case 2: return userId;
    case 3: return browserId;
    case 4: return peerConnectionUUID;
    case 5: return candidateId;
    case 6: return candidateType;
    case 7: return deleted;
    case 8: return ipLSH;
    case 9: return isRemote;
    case 10: return port;
    case 11: return priority;
    case 12: return protocol;
    case 13: return transportID;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 1: callName = value$ != null ? value$.toString() : null; break;
    case 2: userId = value$ != null ? value$.toString() : null; break;
    case 3: browserId = value$ != null ? value$.toString() : null; break;
    case 4: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 5: candidateId = value$ != null ? value$.toString() : null; break;
    case 6: candidateType = (org.observertc.webrtc.schemas.reports.CandidateType)value$; break;
    case 7: deleted = (java.lang.Boolean)value$; break;
    case 8: ipLSH = value$ != null ? value$.toString() : null; break;
    case 9: isRemote = (java.lang.Boolean)value$; break;
    case 10: port = (java.lang.Integer)value$; break;
    case 11: priority = (java.lang.Long)value$; break;
    case 12: protocol = (org.observertc.webrtc.schemas.reports.TransportProtocol)value$; break;
    case 13: transportID = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The value of the 'mediaUnitId' field.
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'callName' field.
   * @return The value of the 'callName' field.
   */
  public java.lang.String getCallName() {
    return callName;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'browserId' field.
   * @return The value of the 'browserId' field.
   */
  public java.lang.String getBrowserId() {
    return browserId;
  }



  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public java.lang.String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'candidateId' field.
   * @return The value of the 'candidateId' field.
   */
  public java.lang.String getCandidateId() {
    return candidateId;
  }



  /**
   * Gets the value of the 'candidateType' field.
   * @return The value of the 'candidateType' field.
   */
  public org.observertc.webrtc.schemas.reports.CandidateType getCandidateType() {
    return candidateType;
  }



  /**
   * Gets the value of the 'deleted' field.
   * @return The value of the 'deleted' field.
   */
  public java.lang.Boolean getDeleted() {
    return deleted;
  }



  /**
   * Gets the value of the 'ipLSH' field.
   * @return The value of the 'ipLSH' field.
   */
  public java.lang.String getIpLSH() {
    return ipLSH;
  }



  /**
   * Gets the value of the 'isRemote' field.
   * @return The value of the 'isRemote' field.
   */
  public java.lang.Boolean getIsRemote() {
    return isRemote;
  }



  /**
   * Gets the value of the 'port' field.
   * @return The value of the 'port' field.
   */
  public java.lang.Integer getPort() {
    return port;
  }



  /**
   * Gets the value of the 'priority' field.
   * @return The value of the 'priority' field.
   */
  public java.lang.Long getPriority() {
    return priority;
  }



  /**
   * Gets the value of the 'protocol' field.
   * @return The value of the 'protocol' field.
   */
  public org.observertc.webrtc.schemas.reports.TransportProtocol getProtocol() {
    return protocol;
  }



  /**
   * Gets the value of the 'transportID' field.
   * @return The value of the 'transportID' field.
   */
  public java.lang.String getTransportID() {
    return transportID;
  }



  /**
   * Creates a new ICERemoteCandidate RecordBuilder.
   * @return A new ICERemoteCandidate RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder();
  }

  /**
   * Creates a new ICERemoteCandidate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ICERemoteCandidate RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder newBuilder(org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder other) {
    if (other == null) {
      return new org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder();
    } else {
      return new org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder(other);
    }
  }

  /**
   * Creates a new ICERemoteCandidate RecordBuilder by copying an existing ICERemoteCandidate instance.
   * @param other The existing instance to copy.
   * @return A new ICERemoteCandidate RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder newBuilder(org.observertc.webrtc.schemas.reports.ICERemoteCandidate other) {
    if (other == null) {
      return new org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder();
    } else {
      return new org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder(other);
    }
  }

  /**
   * RecordBuilder for ICERemoteCandidate instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ICERemoteCandidate>
    implements org.apache.avro.data.RecordBuilder<ICERemoteCandidate> {

    private java.lang.String mediaUnitId;
    private java.lang.String callName;
    private java.lang.String userId;
    private java.lang.String browserId;
    private java.lang.String peerConnectionUUID;
    private java.lang.String candidateId;
    private org.observertc.webrtc.schemas.reports.CandidateType candidateType;
    private java.lang.Boolean deleted;
    private java.lang.String ipLSH;
    private java.lang.Boolean isRemote;
    private java.lang.Integer port;
    private java.lang.Long priority;
    private org.observertc.webrtc.schemas.reports.TransportProtocol protocol;
    private java.lang.String transportID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.candidateId)) {
        this.candidateId = data().deepCopy(fields()[5].schema(), other.candidateId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.candidateType)) {
        this.candidateType = data().deepCopy(fields()[6].schema(), other.candidateType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.deleted)) {
        this.deleted = data().deepCopy(fields()[7].schema(), other.deleted);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.ipLSH)) {
        this.ipLSH = data().deepCopy(fields()[8].schema(), other.ipLSH);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.isRemote)) {
        this.isRemote = data().deepCopy(fields()[9].schema(), other.isRemote);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.port)) {
        this.port = data().deepCopy(fields()[10].schema(), other.port);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.priority)) {
        this.priority = data().deepCopy(fields()[11].schema(), other.priority);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.protocol)) {
        this.protocol = data().deepCopy(fields()[12].schema(), other.protocol);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.transportID)) {
        this.transportID = data().deepCopy(fields()[13].schema(), other.transportID);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing ICERemoteCandidate instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.ICERemoteCandidate other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.candidateId)) {
        this.candidateId = data().deepCopy(fields()[5].schema(), other.candidateId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.candidateType)) {
        this.candidateType = data().deepCopy(fields()[6].schema(), other.candidateType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.deleted)) {
        this.deleted = data().deepCopy(fields()[7].schema(), other.deleted);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.ipLSH)) {
        this.ipLSH = data().deepCopy(fields()[8].schema(), other.ipLSH);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isRemote)) {
        this.isRemote = data().deepCopy(fields()[9].schema(), other.isRemote);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.port)) {
        this.port = data().deepCopy(fields()[10].schema(), other.port);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.priority)) {
        this.priority = data().deepCopy(fields()[11].schema(), other.priority);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.protocol)) {
        this.protocol = data().deepCopy(fields()[12].schema(), other.protocol);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.transportID)) {
        this.transportID = data().deepCopy(fields()[13].schema(), other.transportID);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'callName' field.
      * @return The value.
      */
    public java.lang.String getCallName() {
      return callName;
    }


    /**
      * Sets the value of the 'callName' field.
      * @param value The value of 'callName'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setCallName(java.lang.String value) {
      validate(fields()[1], value);
      this.callName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'callName' field has been set.
      * @return True if the 'callName' field has been set, false otherwise.
      */
    public boolean hasCallName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'callName' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearCallName() {
      callName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setUserId(java.lang.String value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserId' field.
      * @return The value.
      */
    public java.lang.String getBrowserId() {
      return browserId;
    }


    /**
      * Sets the value of the 'browserId' field.
      * @param value The value of 'browserId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setBrowserId(java.lang.String value) {
      validate(fields()[3], value);
      this.browserId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'browserId' field has been set.
      * @return True if the 'browserId' field has been set, false otherwise.
      */
    public boolean hasBrowserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'browserId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearBrowserId() {
      browserId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public java.lang.String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setPeerConnectionUUID(java.lang.String value) {
      validate(fields()[4], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidateId' field.
      * @return The value.
      */
    public java.lang.String getCandidateId() {
      return candidateId;
    }


    /**
      * Sets the value of the 'candidateId' field.
      * @param value The value of 'candidateId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setCandidateId(java.lang.String value) {
      validate(fields()[5], value);
      this.candidateId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'candidateId' field has been set.
      * @return True if the 'candidateId' field has been set, false otherwise.
      */
    public boolean hasCandidateId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'candidateId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearCandidateId() {
      candidateId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'candidateType' field.
      * @return The value.
      */
    public org.observertc.webrtc.schemas.reports.CandidateType getCandidateType() {
      return candidateType;
    }


    /**
      * Sets the value of the 'candidateType' field.
      * @param value The value of 'candidateType'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setCandidateType(org.observertc.webrtc.schemas.reports.CandidateType value) {
      validate(fields()[6], value);
      this.candidateType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'candidateType' field has been set.
      * @return True if the 'candidateType' field has been set, false otherwise.
      */
    public boolean hasCandidateType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'candidateType' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearCandidateType() {
      candidateType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'deleted' field.
      * @return The value.
      */
    public java.lang.Boolean getDeleted() {
      return deleted;
    }


    /**
      * Sets the value of the 'deleted' field.
      * @param value The value of 'deleted'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setDeleted(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.deleted = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'deleted' field has been set.
      * @return True if the 'deleted' field has been set, false otherwise.
      */
    public boolean hasDeleted() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'deleted' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearDeleted() {
      deleted = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ipLSH' field.
      * @return The value.
      */
    public java.lang.String getIpLSH() {
      return ipLSH;
    }


    /**
      * Sets the value of the 'ipLSH' field.
      * @param value The value of 'ipLSH'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setIpLSH(java.lang.String value) {
      validate(fields()[8], value);
      this.ipLSH = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ipLSH' field has been set.
      * @return True if the 'ipLSH' field has been set, false otherwise.
      */
    public boolean hasIpLSH() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'ipLSH' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearIpLSH() {
      ipLSH = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRemote' field.
      * @return The value.
      */
    public java.lang.Boolean getIsRemote() {
      return isRemote;
    }


    /**
      * Sets the value of the 'isRemote' field.
      * @param value The value of 'isRemote'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setIsRemote(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.isRemote = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'isRemote' field has been set.
      * @return True if the 'isRemote' field has been set, false otherwise.
      */
    public boolean hasIsRemote() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'isRemote' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearIsRemote() {
      isRemote = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'port' field.
      * @return The value.
      */
    public java.lang.Integer getPort() {
      return port;
    }


    /**
      * Sets the value of the 'port' field.
      * @param value The value of 'port'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setPort(java.lang.Integer value) {
      validate(fields()[10], value);
      this.port = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'port' field has been set.
      * @return True if the 'port' field has been set, false otherwise.
      */
    public boolean hasPort() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'port' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearPort() {
      port = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'priority' field.
      * @return The value.
      */
    public java.lang.Long getPriority() {
      return priority;
    }


    /**
      * Sets the value of the 'priority' field.
      * @param value The value of 'priority'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setPriority(java.lang.Long value) {
      validate(fields()[11], value);
      this.priority = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'priority' field has been set.
      * @return True if the 'priority' field has been set, false otherwise.
      */
    public boolean hasPriority() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'priority' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearPriority() {
      priority = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'protocol' field.
      * @return The value.
      */
    public org.observertc.webrtc.schemas.reports.TransportProtocol getProtocol() {
      return protocol;
    }


    /**
      * Sets the value of the 'protocol' field.
      * @param value The value of 'protocol'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setProtocol(org.observertc.webrtc.schemas.reports.TransportProtocol value) {
      validate(fields()[12], value);
      this.protocol = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'protocol' field has been set.
      * @return True if the 'protocol' field has been set, false otherwise.
      */
    public boolean hasProtocol() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'protocol' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportID' field.
      * @return The value.
      */
    public java.lang.String getTransportID() {
      return transportID;
    }


    /**
      * Sets the value of the 'transportID' field.
      * @param value The value of 'transportID'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder setTransportID(java.lang.String value) {
      validate(fields()[13], value);
      this.transportID = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'transportID' field has been set.
      * @return True if the 'transportID' field has been set, false otherwise.
      */
    public boolean hasTransportID() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'transportID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.ICERemoteCandidate.Builder clearTransportID() {
      transportID = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ICERemoteCandidate build() {
      try {
        ICERemoteCandidate record = new ICERemoteCandidate();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[0]);
        record.callName = fieldSetFlags()[1] ? this.callName : (java.lang.String) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.String) defaultValue(fields()[2]);
        record.browserId = fieldSetFlags()[3] ? this.browserId : (java.lang.String) defaultValue(fields()[3]);
        record.peerConnectionUUID = fieldSetFlags()[4] ? this.peerConnectionUUID : (java.lang.String) defaultValue(fields()[4]);
        record.candidateId = fieldSetFlags()[5] ? this.candidateId : (java.lang.String) defaultValue(fields()[5]);
        record.candidateType = fieldSetFlags()[6] ? this.candidateType : (org.observertc.webrtc.schemas.reports.CandidateType) defaultValue(fields()[6]);
        record.deleted = fieldSetFlags()[7] ? this.deleted : (java.lang.Boolean) defaultValue(fields()[7]);
        record.ipLSH = fieldSetFlags()[8] ? this.ipLSH : (java.lang.String) defaultValue(fields()[8]);
        record.isRemote = fieldSetFlags()[9] ? this.isRemote : (java.lang.Boolean) defaultValue(fields()[9]);
        record.port = fieldSetFlags()[10] ? this.port : (java.lang.Integer) defaultValue(fields()[10]);
        record.priority = fieldSetFlags()[11] ? this.priority : (java.lang.Long) defaultValue(fields()[11]);
        record.protocol = fieldSetFlags()[12] ? this.protocol : (org.observertc.webrtc.schemas.reports.TransportProtocol) defaultValue(fields()[12]);
        record.transportID = fieldSetFlags()[13] ? this.transportID : (java.lang.String) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ICERemoteCandidate>
    WRITER$ = (org.apache.avro.io.DatumWriter<ICERemoteCandidate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ICERemoteCandidate>
    READER$ = (org.apache.avro.io.DatumReader<ICERemoteCandidate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

    if (this.callName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callName);
    }

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    if (this.browserId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserId);
    }

    out.writeString(this.peerConnectionUUID);

    out.writeString(this.candidateId);

    out.writeEnum(this.candidateType.ordinal());

    if (this.deleted == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.deleted);
    }

    if (this.ipLSH == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ipLSH);
    }

    if (this.isRemote == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.isRemote);
    }

    if (this.port == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.port);
    }

    if (this.priority == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.priority);
    }

    out.writeEnum(this.protocol.ordinal());

    if (this.transportID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.transportID);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.callName = null;
      } else {
        this.callName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserId = null;
      } else {
        this.browserId = in.readString();
      }

      this.peerConnectionUUID = in.readString();

      this.candidateId = in.readString();

      this.candidateType = org.observertc.webrtc.schemas.reports.CandidateType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.deleted = null;
      } else {
        this.deleted = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ipLSH = null;
      } else {
        this.ipLSH = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isRemote = null;
      } else {
        this.isRemote = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.port = null;
      } else {
        this.port = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.priority = null;
      } else {
        this.priority = in.readLong();
      }

      this.protocol = org.observertc.webrtc.schemas.reports.TransportProtocol.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.transportID = null;
      } else {
        this.transportID = in.readString();
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callName = null;
          } else {
            this.callName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserId = null;
          } else {
            this.browserId = in.readString();
          }
          break;

        case 4:
          this.peerConnectionUUID = in.readString();
          break;

        case 5:
          this.candidateId = in.readString();
          break;

        case 6:
          this.candidateType = org.observertc.webrtc.schemas.reports.CandidateType.values()[in.readEnum()];
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.deleted = null;
          } else {
            this.deleted = in.readBoolean();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ipLSH = null;
          } else {
            this.ipLSH = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isRemote = null;
          } else {
            this.isRemote = in.readBoolean();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.port = null;
          } else {
            this.port = in.readInt();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.priority = null;
          } else {
            this.priority = in.readLong();
          }
          break;

        case 12:
          this.protocol = org.observertc.webrtc.schemas.reports.TransportProtocol.values()[in.readEnum()];
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transportID = null;
          } else {
            this.transportID = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










