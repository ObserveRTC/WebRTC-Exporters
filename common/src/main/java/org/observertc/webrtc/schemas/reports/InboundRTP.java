/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.observertc.webrtc.schemas.reports;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InboundRTP extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3733737464204926943L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InboundRTP\",\"namespace\":\"org.observertc.webrtc.schemas.reports\",\"fields\":[{\"name\":\"mediaUnitId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"callName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"browserId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"peerConnectionUUID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ssrc\",\"type\":\"long\"},{\"name\":\"bytesReceived\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"codecId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"decoderImplementation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"estimatedPlayoutTimestamp\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"fecPacketsDiscarded\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"fecPacketsReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"firCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"framesDecoded\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"headerBytesReceived\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"isRemote\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"jitter\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"keyFramesDecoded\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"lastPacketReceivedTimestamp\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"mediaType\",\"type\":{\"type\":\"enum\",\"name\":\"MediaType\",\"symbols\":[\"AUDIO\",\"VIDEO\",\"UNKNOWN\",\"NULL\"]},\"default\":\"UNKNOWN\"},{\"name\":\"nackCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"packetsLost\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"packetsReceived\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"pliCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"qpSum\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"totalDecodeTime\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"totalInterFrameDelay\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"totalSquaredInterFrameDelay\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"trackId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"transportId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InboundRTP> ENCODER =
      new BinaryMessageEncoder<InboundRTP>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InboundRTP> DECODER =
      new BinaryMessageDecoder<InboundRTP>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InboundRTP> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InboundRTP> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InboundRTP> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InboundRTP>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InboundRTP to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InboundRTP from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InboundRTP instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InboundRTP fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String mediaUnitId;
   private java.lang.String callName;
   private java.lang.String userId;
   private java.lang.String browserId;
   private java.lang.String peerConnectionUUID;
   private long ssrc;
   private java.lang.Long bytesReceived;
   private java.lang.String codecId;
   private java.lang.String decoderImplementation;
   private java.lang.Double estimatedPlayoutTimestamp;
   private java.lang.Integer fecPacketsDiscarded;
   private java.lang.Integer fecPacketsReceived;
   private java.lang.Integer firCount;
   private java.lang.Integer framesDecoded;
   private java.lang.Long headerBytesReceived;
   private java.lang.String id;
   private java.lang.Boolean isRemote;
   private java.lang.Double jitter;
   private java.lang.Integer keyFramesDecoded;
   private java.lang.Double lastPacketReceivedTimestamp;
   private org.observertc.webrtc.schemas.reports.MediaType mediaType;
   private java.lang.Integer nackCount;
   private java.lang.Integer packetsLost;
   private java.lang.Integer packetsReceived;
   private java.lang.Integer pliCount;
   private java.lang.Double qpSum;
   private java.lang.Double totalDecodeTime;
   private java.lang.Double totalInterFrameDelay;
   private java.lang.Double totalSquaredInterFrameDelay;
   private java.lang.String trackId;
   private java.lang.String transportId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InboundRTP() {}

  /**
   * All-args constructor.
   * @param mediaUnitId The new value for mediaUnitId
   * @param callName The new value for callName
   * @param userId The new value for userId
   * @param browserId The new value for browserId
   * @param peerConnectionUUID The new value for peerConnectionUUID
   * @param ssrc The new value for ssrc
   * @param bytesReceived The new value for bytesReceived
   * @param codecId The new value for codecId
   * @param decoderImplementation The new value for decoderImplementation
   * @param estimatedPlayoutTimestamp The new value for estimatedPlayoutTimestamp
   * @param fecPacketsDiscarded The new value for fecPacketsDiscarded
   * @param fecPacketsReceived The new value for fecPacketsReceived
   * @param firCount The new value for firCount
   * @param framesDecoded The new value for framesDecoded
   * @param headerBytesReceived The new value for headerBytesReceived
   * @param id The new value for id
   * @param isRemote The new value for isRemote
   * @param jitter The new value for jitter
   * @param keyFramesDecoded The new value for keyFramesDecoded
   * @param lastPacketReceivedTimestamp The new value for lastPacketReceivedTimestamp
   * @param mediaType The new value for mediaType
   * @param nackCount The new value for nackCount
   * @param packetsLost The new value for packetsLost
   * @param packetsReceived The new value for packetsReceived
   * @param pliCount The new value for pliCount
   * @param qpSum The new value for qpSum
   * @param totalDecodeTime The new value for totalDecodeTime
   * @param totalInterFrameDelay The new value for totalInterFrameDelay
   * @param totalSquaredInterFrameDelay The new value for totalSquaredInterFrameDelay
   * @param trackId The new value for trackId
   * @param transportId The new value for transportId
   */
  public InboundRTP(java.lang.String mediaUnitId, java.lang.String callName, java.lang.String userId, java.lang.String browserId, java.lang.String peerConnectionUUID, java.lang.Long ssrc, java.lang.Long bytesReceived, java.lang.String codecId, java.lang.String decoderImplementation, java.lang.Double estimatedPlayoutTimestamp, java.lang.Integer fecPacketsDiscarded, java.lang.Integer fecPacketsReceived, java.lang.Integer firCount, java.lang.Integer framesDecoded, java.lang.Long headerBytesReceived, java.lang.String id, java.lang.Boolean isRemote, java.lang.Double jitter, java.lang.Integer keyFramesDecoded, java.lang.Double lastPacketReceivedTimestamp, org.observertc.webrtc.schemas.reports.MediaType mediaType, java.lang.Integer nackCount, java.lang.Integer packetsLost, java.lang.Integer packetsReceived, java.lang.Integer pliCount, java.lang.Double qpSum, java.lang.Double totalDecodeTime, java.lang.Double totalInterFrameDelay, java.lang.Double totalSquaredInterFrameDelay, java.lang.String trackId, java.lang.String transportId) {
    this.mediaUnitId = mediaUnitId;
    this.callName = callName;
    this.userId = userId;
    this.browserId = browserId;
    this.peerConnectionUUID = peerConnectionUUID;
    this.ssrc = ssrc;
    this.bytesReceived = bytesReceived;
    this.codecId = codecId;
    this.decoderImplementation = decoderImplementation;
    this.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;
    this.fecPacketsDiscarded = fecPacketsDiscarded;
    this.fecPacketsReceived = fecPacketsReceived;
    this.firCount = firCount;
    this.framesDecoded = framesDecoded;
    this.headerBytesReceived = headerBytesReceived;
    this.id = id;
    this.isRemote = isRemote;
    this.jitter = jitter;
    this.keyFramesDecoded = keyFramesDecoded;
    this.lastPacketReceivedTimestamp = lastPacketReceivedTimestamp;
    this.mediaType = mediaType;
    this.nackCount = nackCount;
    this.packetsLost = packetsLost;
    this.packetsReceived = packetsReceived;
    this.pliCount = pliCount;
    this.qpSum = qpSum;
    this.totalDecodeTime = totalDecodeTime;
    this.totalInterFrameDelay = totalInterFrameDelay;
    this.totalSquaredInterFrameDelay = totalSquaredInterFrameDelay;
    this.trackId = trackId;
    this.transportId = transportId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mediaUnitId;
    case 1: return callName;
    case 2: return userId;
    case 3: return browserId;
    case 4: return peerConnectionUUID;
    case 5: return ssrc;
    case 6: return bytesReceived;
    case 7: return codecId;
    case 8: return decoderImplementation;
    case 9: return estimatedPlayoutTimestamp;
    case 10: return fecPacketsDiscarded;
    case 11: return fecPacketsReceived;
    case 12: return firCount;
    case 13: return framesDecoded;
    case 14: return headerBytesReceived;
    case 15: return id;
    case 16: return isRemote;
    case 17: return jitter;
    case 18: return keyFramesDecoded;
    case 19: return lastPacketReceivedTimestamp;
    case 20: return mediaType;
    case 21: return nackCount;
    case 22: return packetsLost;
    case 23: return packetsReceived;
    case 24: return pliCount;
    case 25: return qpSum;
    case 26: return totalDecodeTime;
    case 27: return totalInterFrameDelay;
    case 28: return totalSquaredInterFrameDelay;
    case 29: return trackId;
    case 30: return transportId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mediaUnitId = value$ != null ? value$.toString() : null; break;
    case 1: callName = value$ != null ? value$.toString() : null; break;
    case 2: userId = value$ != null ? value$.toString() : null; break;
    case 3: browserId = value$ != null ? value$.toString() : null; break;
    case 4: peerConnectionUUID = value$ != null ? value$.toString() : null; break;
    case 5: ssrc = (java.lang.Long)value$; break;
    case 6: bytesReceived = (java.lang.Long)value$; break;
    case 7: codecId = value$ != null ? value$.toString() : null; break;
    case 8: decoderImplementation = value$ != null ? value$.toString() : null; break;
    case 9: estimatedPlayoutTimestamp = (java.lang.Double)value$; break;
    case 10: fecPacketsDiscarded = (java.lang.Integer)value$; break;
    case 11: fecPacketsReceived = (java.lang.Integer)value$; break;
    case 12: firCount = (java.lang.Integer)value$; break;
    case 13: framesDecoded = (java.lang.Integer)value$; break;
    case 14: headerBytesReceived = (java.lang.Long)value$; break;
    case 15: id = value$ != null ? value$.toString() : null; break;
    case 16: isRemote = (java.lang.Boolean)value$; break;
    case 17: jitter = (java.lang.Double)value$; break;
    case 18: keyFramesDecoded = (java.lang.Integer)value$; break;
    case 19: lastPacketReceivedTimestamp = (java.lang.Double)value$; break;
    case 20: mediaType = (org.observertc.webrtc.schemas.reports.MediaType)value$; break;
    case 21: nackCount = (java.lang.Integer)value$; break;
    case 22: packetsLost = (java.lang.Integer)value$; break;
    case 23: packetsReceived = (java.lang.Integer)value$; break;
    case 24: pliCount = (java.lang.Integer)value$; break;
    case 25: qpSum = (java.lang.Double)value$; break;
    case 26: totalDecodeTime = (java.lang.Double)value$; break;
    case 27: totalInterFrameDelay = (java.lang.Double)value$; break;
    case 28: totalSquaredInterFrameDelay = (java.lang.Double)value$; break;
    case 29: trackId = value$ != null ? value$.toString() : null; break;
    case 30: transportId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'mediaUnitId' field.
   * @return The value of the 'mediaUnitId' field.
   */
  public java.lang.String getMediaUnitId() {
    return mediaUnitId;
  }



  /**
   * Gets the value of the 'callName' field.
   * @return The value of the 'callName' field.
   */
  public java.lang.String getCallName() {
    return callName;
  }



  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }



  /**
   * Gets the value of the 'browserId' field.
   * @return The value of the 'browserId' field.
   */
  public java.lang.String getBrowserId() {
    return browserId;
  }



  /**
   * Gets the value of the 'peerConnectionUUID' field.
   * @return The value of the 'peerConnectionUUID' field.
   */
  public java.lang.String getPeerConnectionUUID() {
    return peerConnectionUUID;
  }



  /**
   * Gets the value of the 'ssrc' field.
   * @return The value of the 'ssrc' field.
   */
  public long getSsrc() {
    return ssrc;
  }



  /**
   * Gets the value of the 'bytesReceived' field.
   * @return The value of the 'bytesReceived' field.
   */
  public java.lang.Long getBytesReceived() {
    return bytesReceived;
  }



  /**
   * Gets the value of the 'codecId' field.
   * @return The value of the 'codecId' field.
   */
  public java.lang.String getCodecId() {
    return codecId;
  }



  /**
   * Gets the value of the 'decoderImplementation' field.
   * @return The value of the 'decoderImplementation' field.
   */
  public java.lang.String getDecoderImplementation() {
    return decoderImplementation;
  }



  /**
   * Gets the value of the 'estimatedPlayoutTimestamp' field.
   * @return The value of the 'estimatedPlayoutTimestamp' field.
   */
  public java.lang.Double getEstimatedPlayoutTimestamp() {
    return estimatedPlayoutTimestamp;
  }



  /**
   * Gets the value of the 'fecPacketsDiscarded' field.
   * @return The value of the 'fecPacketsDiscarded' field.
   */
  public java.lang.Integer getFecPacketsDiscarded() {
    return fecPacketsDiscarded;
  }



  /**
   * Gets the value of the 'fecPacketsReceived' field.
   * @return The value of the 'fecPacketsReceived' field.
   */
  public java.lang.Integer getFecPacketsReceived() {
    return fecPacketsReceived;
  }



  /**
   * Gets the value of the 'firCount' field.
   * @return The value of the 'firCount' field.
   */
  public java.lang.Integer getFirCount() {
    return firCount;
  }



  /**
   * Gets the value of the 'framesDecoded' field.
   * @return The value of the 'framesDecoded' field.
   */
  public java.lang.Integer getFramesDecoded() {
    return framesDecoded;
  }



  /**
   * Gets the value of the 'headerBytesReceived' field.
   * @return The value of the 'headerBytesReceived' field.
   */
  public java.lang.Long getHeaderBytesReceived() {
    return headerBytesReceived;
  }



  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }



  /**
   * Gets the value of the 'isRemote' field.
   * @return The value of the 'isRemote' field.
   */
  public java.lang.Boolean getIsRemote() {
    return isRemote;
  }



  /**
   * Gets the value of the 'jitter' field.
   * @return The value of the 'jitter' field.
   */
  public java.lang.Double getJitter() {
    return jitter;
  }



  /**
   * Gets the value of the 'keyFramesDecoded' field.
   * @return The value of the 'keyFramesDecoded' field.
   */
  public java.lang.Integer getKeyFramesDecoded() {
    return keyFramesDecoded;
  }



  /**
   * Gets the value of the 'lastPacketReceivedTimestamp' field.
   * @return The value of the 'lastPacketReceivedTimestamp' field.
   */
  public java.lang.Double getLastPacketReceivedTimestamp() {
    return lastPacketReceivedTimestamp;
  }



  /**
   * Gets the value of the 'mediaType' field.
   * @return The value of the 'mediaType' field.
   */
  public org.observertc.webrtc.schemas.reports.MediaType getMediaType() {
    return mediaType;
  }



  /**
   * Gets the value of the 'nackCount' field.
   * @return The value of the 'nackCount' field.
   */
  public java.lang.Integer getNackCount() {
    return nackCount;
  }



  /**
   * Gets the value of the 'packetsLost' field.
   * @return The value of the 'packetsLost' field.
   */
  public java.lang.Integer getPacketsLost() {
    return packetsLost;
  }



  /**
   * Gets the value of the 'packetsReceived' field.
   * @return The value of the 'packetsReceived' field.
   */
  public java.lang.Integer getPacketsReceived() {
    return packetsReceived;
  }



  /**
   * Gets the value of the 'pliCount' field.
   * @return The value of the 'pliCount' field.
   */
  public java.lang.Integer getPliCount() {
    return pliCount;
  }



  /**
   * Gets the value of the 'qpSum' field.
   * @return The value of the 'qpSum' field.
   */
  public java.lang.Double getQpSum() {
    return qpSum;
  }



  /**
   * Gets the value of the 'totalDecodeTime' field.
   * @return The value of the 'totalDecodeTime' field.
   */
  public java.lang.Double getTotalDecodeTime() {
    return totalDecodeTime;
  }



  /**
   * Gets the value of the 'totalInterFrameDelay' field.
   * @return The value of the 'totalInterFrameDelay' field.
   */
  public java.lang.Double getTotalInterFrameDelay() {
    return totalInterFrameDelay;
  }



  /**
   * Gets the value of the 'totalSquaredInterFrameDelay' field.
   * @return The value of the 'totalSquaredInterFrameDelay' field.
   */
  public java.lang.Double getTotalSquaredInterFrameDelay() {
    return totalSquaredInterFrameDelay;
  }



  /**
   * Gets the value of the 'trackId' field.
   * @return The value of the 'trackId' field.
   */
  public java.lang.String getTrackId() {
    return trackId;
  }



  /**
   * Gets the value of the 'transportId' field.
   * @return The value of the 'transportId' field.
   */
  public java.lang.String getTransportId() {
    return transportId;
  }



  /**
   * Creates a new InboundRTP RecordBuilder.
   * @return A new InboundRTP RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.InboundRTP.Builder newBuilder() {
    return new org.observertc.webrtc.schemas.reports.InboundRTP.Builder();
  }

  /**
   * Creates a new InboundRTP RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InboundRTP RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.InboundRTP.Builder newBuilder(org.observertc.webrtc.schemas.reports.InboundRTP.Builder other) {
    if (other == null) {
      return new org.observertc.webrtc.schemas.reports.InboundRTP.Builder();
    } else {
      return new org.observertc.webrtc.schemas.reports.InboundRTP.Builder(other);
    }
  }

  /**
   * Creates a new InboundRTP RecordBuilder by copying an existing InboundRTP instance.
   * @param other The existing instance to copy.
   * @return A new InboundRTP RecordBuilder
   */
  public static org.observertc.webrtc.schemas.reports.InboundRTP.Builder newBuilder(org.observertc.webrtc.schemas.reports.InboundRTP other) {
    if (other == null) {
      return new org.observertc.webrtc.schemas.reports.InboundRTP.Builder();
    } else {
      return new org.observertc.webrtc.schemas.reports.InboundRTP.Builder(other);
    }
  }

  /**
   * RecordBuilder for InboundRTP instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InboundRTP>
    implements org.apache.avro.data.RecordBuilder<InboundRTP> {

    private java.lang.String mediaUnitId;
    private java.lang.String callName;
    private java.lang.String userId;
    private java.lang.String browserId;
    private java.lang.String peerConnectionUUID;
    private long ssrc;
    private java.lang.Long bytesReceived;
    private java.lang.String codecId;
    private java.lang.String decoderImplementation;
    private java.lang.Double estimatedPlayoutTimestamp;
    private java.lang.Integer fecPacketsDiscarded;
    private java.lang.Integer fecPacketsReceived;
    private java.lang.Integer firCount;
    private java.lang.Integer framesDecoded;
    private java.lang.Long headerBytesReceived;
    private java.lang.String id;
    private java.lang.Boolean isRemote;
    private java.lang.Double jitter;
    private java.lang.Integer keyFramesDecoded;
    private java.lang.Double lastPacketReceivedTimestamp;
    private org.observertc.webrtc.schemas.reports.MediaType mediaType;
    private java.lang.Integer nackCount;
    private java.lang.Integer packetsLost;
    private java.lang.Integer packetsReceived;
    private java.lang.Integer pliCount;
    private java.lang.Double qpSum;
    private java.lang.Double totalDecodeTime;
    private java.lang.Double totalInterFrameDelay;
    private java.lang.Double totalSquaredInterFrameDelay;
    private java.lang.String trackId;
    private java.lang.String transportId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.InboundRTP.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[5].schema(), other.ssrc);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[6].schema(), other.bytesReceived);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.codecId)) {
        this.codecId = data().deepCopy(fields()[7].schema(), other.codecId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.decoderImplementation)) {
        this.decoderImplementation = data().deepCopy(fields()[8].schema(), other.decoderImplementation);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.estimatedPlayoutTimestamp)) {
        this.estimatedPlayoutTimestamp = data().deepCopy(fields()[9].schema(), other.estimatedPlayoutTimestamp);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[10].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[11].schema(), other.fecPacketsReceived);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.firCount)) {
        this.firCount = data().deepCopy(fields()[12].schema(), other.firCount);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[13].schema(), other.framesDecoded);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.headerBytesReceived)) {
        this.headerBytesReceived = data().deepCopy(fields()[14].schema(), other.headerBytesReceived);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.id)) {
        this.id = data().deepCopy(fields()[15].schema(), other.id);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.isRemote)) {
        this.isRemote = data().deepCopy(fields()[16].schema(), other.isRemote);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.jitter)) {
        this.jitter = data().deepCopy(fields()[17].schema(), other.jitter);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.keyFramesDecoded)) {
        this.keyFramesDecoded = data().deepCopy(fields()[18].schema(), other.keyFramesDecoded);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.lastPacketReceivedTimestamp)) {
        this.lastPacketReceivedTimestamp = data().deepCopy(fields()[19].schema(), other.lastPacketReceivedTimestamp);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[20].schema(), other.mediaType);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[21].schema(), other.nackCount);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[22].schema(), other.packetsLost);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[23].schema(), other.packetsReceived);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[24].schema(), other.pliCount);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[25].schema(), other.qpSum);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.totalDecodeTime)) {
        this.totalDecodeTime = data().deepCopy(fields()[26].schema(), other.totalDecodeTime);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.totalInterFrameDelay)) {
        this.totalInterFrameDelay = data().deepCopy(fields()[27].schema(), other.totalInterFrameDelay);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.totalSquaredInterFrameDelay)) {
        this.totalSquaredInterFrameDelay = data().deepCopy(fields()[28].schema(), other.totalSquaredInterFrameDelay);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.trackId)) {
        this.trackId = data().deepCopy(fields()[29].schema(), other.trackId);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.transportId)) {
        this.transportId = data().deepCopy(fields()[30].schema(), other.transportId);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
    }

    /**
     * Creates a Builder by copying an existing InboundRTP instance
     * @param other The existing instance to copy.
     */
    private Builder(org.observertc.webrtc.schemas.reports.InboundRTP other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediaUnitId)) {
        this.mediaUnitId = data().deepCopy(fields()[0].schema(), other.mediaUnitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.callName)) {
        this.callName = data().deepCopy(fields()[1].schema(), other.callName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.browserId)) {
        this.browserId = data().deepCopy(fields()[3].schema(), other.browserId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.peerConnectionUUID)) {
        this.peerConnectionUUID = data().deepCopy(fields()[4].schema(), other.peerConnectionUUID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ssrc)) {
        this.ssrc = data().deepCopy(fields()[5].schema(), other.ssrc);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bytesReceived)) {
        this.bytesReceived = data().deepCopy(fields()[6].schema(), other.bytesReceived);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.codecId)) {
        this.codecId = data().deepCopy(fields()[7].schema(), other.codecId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.decoderImplementation)) {
        this.decoderImplementation = data().deepCopy(fields()[8].schema(), other.decoderImplementation);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.estimatedPlayoutTimestamp)) {
        this.estimatedPlayoutTimestamp = data().deepCopy(fields()[9].schema(), other.estimatedPlayoutTimestamp);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.fecPacketsDiscarded)) {
        this.fecPacketsDiscarded = data().deepCopy(fields()[10].schema(), other.fecPacketsDiscarded);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.fecPacketsReceived)) {
        this.fecPacketsReceived = data().deepCopy(fields()[11].schema(), other.fecPacketsReceived);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.firCount)) {
        this.firCount = data().deepCopy(fields()[12].schema(), other.firCount);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.framesDecoded)) {
        this.framesDecoded = data().deepCopy(fields()[13].schema(), other.framesDecoded);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.headerBytesReceived)) {
        this.headerBytesReceived = data().deepCopy(fields()[14].schema(), other.headerBytesReceived);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.id)) {
        this.id = data().deepCopy(fields()[15].schema(), other.id);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.isRemote)) {
        this.isRemote = data().deepCopy(fields()[16].schema(), other.isRemote);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.jitter)) {
        this.jitter = data().deepCopy(fields()[17].schema(), other.jitter);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.keyFramesDecoded)) {
        this.keyFramesDecoded = data().deepCopy(fields()[18].schema(), other.keyFramesDecoded);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.lastPacketReceivedTimestamp)) {
        this.lastPacketReceivedTimestamp = data().deepCopy(fields()[19].schema(), other.lastPacketReceivedTimestamp);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.mediaType)) {
        this.mediaType = data().deepCopy(fields()[20].schema(), other.mediaType);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.nackCount)) {
        this.nackCount = data().deepCopy(fields()[21].schema(), other.nackCount);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.packetsLost)) {
        this.packetsLost = data().deepCopy(fields()[22].schema(), other.packetsLost);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.packetsReceived)) {
        this.packetsReceived = data().deepCopy(fields()[23].schema(), other.packetsReceived);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.pliCount)) {
        this.pliCount = data().deepCopy(fields()[24].schema(), other.pliCount);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.qpSum)) {
        this.qpSum = data().deepCopy(fields()[25].schema(), other.qpSum);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.totalDecodeTime)) {
        this.totalDecodeTime = data().deepCopy(fields()[26].schema(), other.totalDecodeTime);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.totalInterFrameDelay)) {
        this.totalInterFrameDelay = data().deepCopy(fields()[27].schema(), other.totalInterFrameDelay);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.totalSquaredInterFrameDelay)) {
        this.totalSquaredInterFrameDelay = data().deepCopy(fields()[28].schema(), other.totalSquaredInterFrameDelay);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.trackId)) {
        this.trackId = data().deepCopy(fields()[29].schema(), other.trackId);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.transportId)) {
        this.transportId = data().deepCopy(fields()[30].schema(), other.transportId);
        fieldSetFlags()[30] = true;
      }
    }

    /**
      * Gets the value of the 'mediaUnitId' field.
      * @return The value.
      */
    public java.lang.String getMediaUnitId() {
      return mediaUnitId;
    }


    /**
      * Sets the value of the 'mediaUnitId' field.
      * @param value The value of 'mediaUnitId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setMediaUnitId(java.lang.String value) {
      validate(fields()[0], value);
      this.mediaUnitId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaUnitId' field has been set.
      * @return True if the 'mediaUnitId' field has been set, false otherwise.
      */
    public boolean hasMediaUnitId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediaUnitId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearMediaUnitId() {
      mediaUnitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'callName' field.
      * @return The value.
      */
    public java.lang.String getCallName() {
      return callName;
    }


    /**
      * Sets the value of the 'callName' field.
      * @param value The value of 'callName'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setCallName(java.lang.String value) {
      validate(fields()[1], value);
      this.callName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'callName' field has been set.
      * @return True if the 'callName' field has been set, false otherwise.
      */
    public boolean hasCallName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'callName' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearCallName() {
      callName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setUserId(java.lang.String value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'browserId' field.
      * @return The value.
      */
    public java.lang.String getBrowserId() {
      return browserId;
    }


    /**
      * Sets the value of the 'browserId' field.
      * @param value The value of 'browserId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setBrowserId(java.lang.String value) {
      validate(fields()[3], value);
      this.browserId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'browserId' field has been set.
      * @return True if the 'browserId' field has been set, false otherwise.
      */
    public boolean hasBrowserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'browserId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearBrowserId() {
      browserId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'peerConnectionUUID' field.
      * @return The value.
      */
    public java.lang.String getPeerConnectionUUID() {
      return peerConnectionUUID;
    }


    /**
      * Sets the value of the 'peerConnectionUUID' field.
      * @param value The value of 'peerConnectionUUID'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setPeerConnectionUUID(java.lang.String value) {
      validate(fields()[4], value);
      this.peerConnectionUUID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'peerConnectionUUID' field has been set.
      * @return True if the 'peerConnectionUUID' field has been set, false otherwise.
      */
    public boolean hasPeerConnectionUUID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'peerConnectionUUID' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearPeerConnectionUUID() {
      peerConnectionUUID = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssrc' field.
      * @return The value.
      */
    public long getSsrc() {
      return ssrc;
    }


    /**
      * Sets the value of the 'ssrc' field.
      * @param value The value of 'ssrc'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setSsrc(long value) {
      validate(fields()[5], value);
      this.ssrc = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ssrc' field has been set.
      * @return True if the 'ssrc' field has been set, false otherwise.
      */
    public boolean hasSsrc() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ssrc' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearSsrc() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytesReceived' field.
      * @return The value.
      */
    public java.lang.Long getBytesReceived() {
      return bytesReceived;
    }


    /**
      * Sets the value of the 'bytesReceived' field.
      * @param value The value of 'bytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setBytesReceived(java.lang.Long value) {
      validate(fields()[6], value);
      this.bytesReceived = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bytesReceived' field has been set.
      * @return True if the 'bytesReceived' field has been set, false otherwise.
      */
    public boolean hasBytesReceived() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bytesReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearBytesReceived() {
      bytesReceived = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'codecId' field.
      * @return The value.
      */
    public java.lang.String getCodecId() {
      return codecId;
    }


    /**
      * Sets the value of the 'codecId' field.
      * @param value The value of 'codecId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setCodecId(java.lang.String value) {
      validate(fields()[7], value);
      this.codecId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'codecId' field has been set.
      * @return True if the 'codecId' field has been set, false otherwise.
      */
    public boolean hasCodecId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'codecId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearCodecId() {
      codecId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'decoderImplementation' field.
      * @return The value.
      */
    public java.lang.String getDecoderImplementation() {
      return decoderImplementation;
    }


    /**
      * Sets the value of the 'decoderImplementation' field.
      * @param value The value of 'decoderImplementation'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setDecoderImplementation(java.lang.String value) {
      validate(fields()[8], value);
      this.decoderImplementation = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'decoderImplementation' field has been set.
      * @return True if the 'decoderImplementation' field has been set, false otherwise.
      */
    public boolean hasDecoderImplementation() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'decoderImplementation' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearDecoderImplementation() {
      decoderImplementation = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedPlayoutTimestamp' field.
      * @return The value.
      */
    public java.lang.Double getEstimatedPlayoutTimestamp() {
      return estimatedPlayoutTimestamp;
    }


    /**
      * Sets the value of the 'estimatedPlayoutTimestamp' field.
      * @param value The value of 'estimatedPlayoutTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setEstimatedPlayoutTimestamp(java.lang.Double value) {
      validate(fields()[9], value);
      this.estimatedPlayoutTimestamp = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedPlayoutTimestamp' field has been set.
      * @return True if the 'estimatedPlayoutTimestamp' field has been set, false otherwise.
      */
    public boolean hasEstimatedPlayoutTimestamp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'estimatedPlayoutTimestamp' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearEstimatedPlayoutTimestamp() {
      estimatedPlayoutTimestamp = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsDiscarded' field.
      * @return The value.
      */
    public java.lang.Integer getFecPacketsDiscarded() {
      return fecPacketsDiscarded;
    }


    /**
      * Sets the value of the 'fecPacketsDiscarded' field.
      * @param value The value of 'fecPacketsDiscarded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setFecPacketsDiscarded(java.lang.Integer value) {
      validate(fields()[10], value);
      this.fecPacketsDiscarded = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsDiscarded' field has been set.
      * @return True if the 'fecPacketsDiscarded' field has been set, false otherwise.
      */
    public boolean hasFecPacketsDiscarded() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'fecPacketsDiscarded' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearFecPacketsDiscarded() {
      fecPacketsDiscarded = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'fecPacketsReceived' field.
      * @return The value.
      */
    public java.lang.Integer getFecPacketsReceived() {
      return fecPacketsReceived;
    }


    /**
      * Sets the value of the 'fecPacketsReceived' field.
      * @param value The value of 'fecPacketsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setFecPacketsReceived(java.lang.Integer value) {
      validate(fields()[11], value);
      this.fecPacketsReceived = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'fecPacketsReceived' field has been set.
      * @return True if the 'fecPacketsReceived' field has been set, false otherwise.
      */
    public boolean hasFecPacketsReceived() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'fecPacketsReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearFecPacketsReceived() {
      fecPacketsReceived = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'firCount' field.
      * @return The value.
      */
    public java.lang.Integer getFirCount() {
      return firCount;
    }


    /**
      * Sets the value of the 'firCount' field.
      * @param value The value of 'firCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setFirCount(java.lang.Integer value) {
      validate(fields()[12], value);
      this.firCount = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'firCount' field has been set.
      * @return True if the 'firCount' field has been set, false otherwise.
      */
    public boolean hasFirCount() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'firCount' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearFirCount() {
      firCount = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'framesDecoded' field.
      * @return The value.
      */
    public java.lang.Integer getFramesDecoded() {
      return framesDecoded;
    }


    /**
      * Sets the value of the 'framesDecoded' field.
      * @param value The value of 'framesDecoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setFramesDecoded(java.lang.Integer value) {
      validate(fields()[13], value);
      this.framesDecoded = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'framesDecoded' field has been set.
      * @return True if the 'framesDecoded' field has been set, false otherwise.
      */
    public boolean hasFramesDecoded() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'framesDecoded' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearFramesDecoded() {
      framesDecoded = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'headerBytesReceived' field.
      * @return The value.
      */
    public java.lang.Long getHeaderBytesReceived() {
      return headerBytesReceived;
    }


    /**
      * Sets the value of the 'headerBytesReceived' field.
      * @param value The value of 'headerBytesReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setHeaderBytesReceived(java.lang.Long value) {
      validate(fields()[14], value);
      this.headerBytesReceived = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'headerBytesReceived' field has been set.
      * @return True if the 'headerBytesReceived' field has been set, false otherwise.
      */
    public boolean hasHeaderBytesReceived() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'headerBytesReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearHeaderBytesReceived() {
      headerBytesReceived = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setId(java.lang.String value) {
      validate(fields()[15], value);
      this.id = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearId() {
      id = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRemote' field.
      * @return The value.
      */
    public java.lang.Boolean getIsRemote() {
      return isRemote;
    }


    /**
      * Sets the value of the 'isRemote' field.
      * @param value The value of 'isRemote'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setIsRemote(java.lang.Boolean value) {
      validate(fields()[16], value);
      this.isRemote = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'isRemote' field has been set.
      * @return True if the 'isRemote' field has been set, false otherwise.
      */
    public boolean hasIsRemote() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'isRemote' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearIsRemote() {
      isRemote = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'jitter' field.
      * @return The value.
      */
    public java.lang.Double getJitter() {
      return jitter;
    }


    /**
      * Sets the value of the 'jitter' field.
      * @param value The value of 'jitter'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setJitter(java.lang.Double value) {
      validate(fields()[17], value);
      this.jitter = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'jitter' field has been set.
      * @return True if the 'jitter' field has been set, false otherwise.
      */
    public boolean hasJitter() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'jitter' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearJitter() {
      jitter = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyFramesDecoded' field.
      * @return The value.
      */
    public java.lang.Integer getKeyFramesDecoded() {
      return keyFramesDecoded;
    }


    /**
      * Sets the value of the 'keyFramesDecoded' field.
      * @param value The value of 'keyFramesDecoded'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setKeyFramesDecoded(java.lang.Integer value) {
      validate(fields()[18], value);
      this.keyFramesDecoded = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'keyFramesDecoded' field has been set.
      * @return True if the 'keyFramesDecoded' field has been set, false otherwise.
      */
    public boolean hasKeyFramesDecoded() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'keyFramesDecoded' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearKeyFramesDecoded() {
      keyFramesDecoded = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPacketReceivedTimestamp' field.
      * @return The value.
      */
    public java.lang.Double getLastPacketReceivedTimestamp() {
      return lastPacketReceivedTimestamp;
    }


    /**
      * Sets the value of the 'lastPacketReceivedTimestamp' field.
      * @param value The value of 'lastPacketReceivedTimestamp'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setLastPacketReceivedTimestamp(java.lang.Double value) {
      validate(fields()[19], value);
      this.lastPacketReceivedTimestamp = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPacketReceivedTimestamp' field has been set.
      * @return True if the 'lastPacketReceivedTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastPacketReceivedTimestamp() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'lastPacketReceivedTimestamp' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearLastPacketReceivedTimestamp() {
      lastPacketReceivedTimestamp = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaType' field.
      * @return The value.
      */
    public org.observertc.webrtc.schemas.reports.MediaType getMediaType() {
      return mediaType;
    }


    /**
      * Sets the value of the 'mediaType' field.
      * @param value The value of 'mediaType'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setMediaType(org.observertc.webrtc.schemas.reports.MediaType value) {
      validate(fields()[20], value);
      this.mediaType = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaType' field has been set.
      * @return True if the 'mediaType' field has been set, false otherwise.
      */
    public boolean hasMediaType() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'mediaType' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearMediaType() {
      mediaType = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'nackCount' field.
      * @return The value.
      */
    public java.lang.Integer getNackCount() {
      return nackCount;
    }


    /**
      * Sets the value of the 'nackCount' field.
      * @param value The value of 'nackCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setNackCount(java.lang.Integer value) {
      validate(fields()[21], value);
      this.nackCount = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'nackCount' field has been set.
      * @return True if the 'nackCount' field has been set, false otherwise.
      */
    public boolean hasNackCount() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'nackCount' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearNackCount() {
      nackCount = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsLost' field.
      * @return The value.
      */
    public java.lang.Integer getPacketsLost() {
      return packetsLost;
    }


    /**
      * Sets the value of the 'packetsLost' field.
      * @param value The value of 'packetsLost'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setPacketsLost(java.lang.Integer value) {
      validate(fields()[22], value);
      this.packetsLost = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsLost' field has been set.
      * @return True if the 'packetsLost' field has been set, false otherwise.
      */
    public boolean hasPacketsLost() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'packetsLost' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearPacketsLost() {
      packetsLost = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'packetsReceived' field.
      * @return The value.
      */
    public java.lang.Integer getPacketsReceived() {
      return packetsReceived;
    }


    /**
      * Sets the value of the 'packetsReceived' field.
      * @param value The value of 'packetsReceived'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setPacketsReceived(java.lang.Integer value) {
      validate(fields()[23], value);
      this.packetsReceived = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'packetsReceived' field has been set.
      * @return True if the 'packetsReceived' field has been set, false otherwise.
      */
    public boolean hasPacketsReceived() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'packetsReceived' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearPacketsReceived() {
      packetsReceived = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'pliCount' field.
      * @return The value.
      */
    public java.lang.Integer getPliCount() {
      return pliCount;
    }


    /**
      * Sets the value of the 'pliCount' field.
      * @param value The value of 'pliCount'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setPliCount(java.lang.Integer value) {
      validate(fields()[24], value);
      this.pliCount = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'pliCount' field has been set.
      * @return True if the 'pliCount' field has been set, false otherwise.
      */
    public boolean hasPliCount() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'pliCount' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearPliCount() {
      pliCount = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'qpSum' field.
      * @return The value.
      */
    public java.lang.Double getQpSum() {
      return qpSum;
    }


    /**
      * Sets the value of the 'qpSum' field.
      * @param value The value of 'qpSum'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setQpSum(java.lang.Double value) {
      validate(fields()[25], value);
      this.qpSum = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'qpSum' field has been set.
      * @return True if the 'qpSum' field has been set, false otherwise.
      */
    public boolean hasQpSum() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'qpSum' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearQpSum() {
      qpSum = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDecodeTime' field.
      * @return The value.
      */
    public java.lang.Double getTotalDecodeTime() {
      return totalDecodeTime;
    }


    /**
      * Sets the value of the 'totalDecodeTime' field.
      * @param value The value of 'totalDecodeTime'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setTotalDecodeTime(java.lang.Double value) {
      validate(fields()[26], value);
      this.totalDecodeTime = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDecodeTime' field has been set.
      * @return True if the 'totalDecodeTime' field has been set, false otherwise.
      */
    public boolean hasTotalDecodeTime() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'totalDecodeTime' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearTotalDecodeTime() {
      totalDecodeTime = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalInterFrameDelay' field.
      * @return The value.
      */
    public java.lang.Double getTotalInterFrameDelay() {
      return totalInterFrameDelay;
    }


    /**
      * Sets the value of the 'totalInterFrameDelay' field.
      * @param value The value of 'totalInterFrameDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setTotalInterFrameDelay(java.lang.Double value) {
      validate(fields()[27], value);
      this.totalInterFrameDelay = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'totalInterFrameDelay' field has been set.
      * @return True if the 'totalInterFrameDelay' field has been set, false otherwise.
      */
    public boolean hasTotalInterFrameDelay() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'totalInterFrameDelay' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearTotalInterFrameDelay() {
      totalInterFrameDelay = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSquaredInterFrameDelay' field.
      * @return The value.
      */
    public java.lang.Double getTotalSquaredInterFrameDelay() {
      return totalSquaredInterFrameDelay;
    }


    /**
      * Sets the value of the 'totalSquaredInterFrameDelay' field.
      * @param value The value of 'totalSquaredInterFrameDelay'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setTotalSquaredInterFrameDelay(java.lang.Double value) {
      validate(fields()[28], value);
      this.totalSquaredInterFrameDelay = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSquaredInterFrameDelay' field has been set.
      * @return True if the 'totalSquaredInterFrameDelay' field has been set, false otherwise.
      */
    public boolean hasTotalSquaredInterFrameDelay() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'totalSquaredInterFrameDelay' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearTotalSquaredInterFrameDelay() {
      totalSquaredInterFrameDelay = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'trackId' field.
      * @return The value.
      */
    public java.lang.String getTrackId() {
      return trackId;
    }


    /**
      * Sets the value of the 'trackId' field.
      * @param value The value of 'trackId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setTrackId(java.lang.String value) {
      validate(fields()[29], value);
      this.trackId = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'trackId' field has been set.
      * @return True if the 'trackId' field has been set, false otherwise.
      */
    public boolean hasTrackId() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'trackId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearTrackId() {
      trackId = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportId' field.
      * @return The value.
      */
    public java.lang.String getTransportId() {
      return transportId;
    }


    /**
      * Sets the value of the 'transportId' field.
      * @param value The value of 'transportId'.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder setTransportId(java.lang.String value) {
      validate(fields()[30], value);
      this.transportId = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'transportId' field has been set.
      * @return True if the 'transportId' field has been set, false otherwise.
      */
    public boolean hasTransportId() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'transportId' field.
      * @return This builder.
      */
    public org.observertc.webrtc.schemas.reports.InboundRTP.Builder clearTransportId() {
      transportId = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InboundRTP build() {
      try {
        InboundRTP record = new InboundRTP();
        record.mediaUnitId = fieldSetFlags()[0] ? this.mediaUnitId : (java.lang.String) defaultValue(fields()[0]);
        record.callName = fieldSetFlags()[1] ? this.callName : (java.lang.String) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.lang.String) defaultValue(fields()[2]);
        record.browserId = fieldSetFlags()[3] ? this.browserId : (java.lang.String) defaultValue(fields()[3]);
        record.peerConnectionUUID = fieldSetFlags()[4] ? this.peerConnectionUUID : (java.lang.String) defaultValue(fields()[4]);
        record.ssrc = fieldSetFlags()[5] ? this.ssrc : (java.lang.Long) defaultValue(fields()[5]);
        record.bytesReceived = fieldSetFlags()[6] ? this.bytesReceived : (java.lang.Long) defaultValue(fields()[6]);
        record.codecId = fieldSetFlags()[7] ? this.codecId : (java.lang.String) defaultValue(fields()[7]);
        record.decoderImplementation = fieldSetFlags()[8] ? this.decoderImplementation : (java.lang.String) defaultValue(fields()[8]);
        record.estimatedPlayoutTimestamp = fieldSetFlags()[9] ? this.estimatedPlayoutTimestamp : (java.lang.Double) defaultValue(fields()[9]);
        record.fecPacketsDiscarded = fieldSetFlags()[10] ? this.fecPacketsDiscarded : (java.lang.Integer) defaultValue(fields()[10]);
        record.fecPacketsReceived = fieldSetFlags()[11] ? this.fecPacketsReceived : (java.lang.Integer) defaultValue(fields()[11]);
        record.firCount = fieldSetFlags()[12] ? this.firCount : (java.lang.Integer) defaultValue(fields()[12]);
        record.framesDecoded = fieldSetFlags()[13] ? this.framesDecoded : (java.lang.Integer) defaultValue(fields()[13]);
        record.headerBytesReceived = fieldSetFlags()[14] ? this.headerBytesReceived : (java.lang.Long) defaultValue(fields()[14]);
        record.id = fieldSetFlags()[15] ? this.id : (java.lang.String) defaultValue(fields()[15]);
        record.isRemote = fieldSetFlags()[16] ? this.isRemote : (java.lang.Boolean) defaultValue(fields()[16]);
        record.jitter = fieldSetFlags()[17] ? this.jitter : (java.lang.Double) defaultValue(fields()[17]);
        record.keyFramesDecoded = fieldSetFlags()[18] ? this.keyFramesDecoded : (java.lang.Integer) defaultValue(fields()[18]);
        record.lastPacketReceivedTimestamp = fieldSetFlags()[19] ? this.lastPacketReceivedTimestamp : (java.lang.Double) defaultValue(fields()[19]);
        record.mediaType = fieldSetFlags()[20] ? this.mediaType : (org.observertc.webrtc.schemas.reports.MediaType) defaultValue(fields()[20]);
        record.nackCount = fieldSetFlags()[21] ? this.nackCount : (java.lang.Integer) defaultValue(fields()[21]);
        record.packetsLost = fieldSetFlags()[22] ? this.packetsLost : (java.lang.Integer) defaultValue(fields()[22]);
        record.packetsReceived = fieldSetFlags()[23] ? this.packetsReceived : (java.lang.Integer) defaultValue(fields()[23]);
        record.pliCount = fieldSetFlags()[24] ? this.pliCount : (java.lang.Integer) defaultValue(fields()[24]);
        record.qpSum = fieldSetFlags()[25] ? this.qpSum : (java.lang.Double) defaultValue(fields()[25]);
        record.totalDecodeTime = fieldSetFlags()[26] ? this.totalDecodeTime : (java.lang.Double) defaultValue(fields()[26]);
        record.totalInterFrameDelay = fieldSetFlags()[27] ? this.totalInterFrameDelay : (java.lang.Double) defaultValue(fields()[27]);
        record.totalSquaredInterFrameDelay = fieldSetFlags()[28] ? this.totalSquaredInterFrameDelay : (java.lang.Double) defaultValue(fields()[28]);
        record.trackId = fieldSetFlags()[29] ? this.trackId : (java.lang.String) defaultValue(fields()[29]);
        record.transportId = fieldSetFlags()[30] ? this.transportId : (java.lang.String) defaultValue(fields()[30]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InboundRTP>
    WRITER$ = (org.apache.avro.io.DatumWriter<InboundRTP>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InboundRTP>
    READER$ = (org.apache.avro.io.DatumReader<InboundRTP>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.mediaUnitId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mediaUnitId);
    }

    if (this.callName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.callName);
    }

    if (this.userId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.userId);
    }

    if (this.browserId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.browserId);
    }

    out.writeString(this.peerConnectionUUID);

    out.writeLong(this.ssrc);

    if (this.bytesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.bytesReceived);
    }

    if (this.codecId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.codecId);
    }

    if (this.decoderImplementation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.decoderImplementation);
    }

    if (this.estimatedPlayoutTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.estimatedPlayoutTimestamp);
    }

    if (this.fecPacketsDiscarded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.fecPacketsDiscarded);
    }

    if (this.fecPacketsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.fecPacketsReceived);
    }

    if (this.firCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.firCount);
    }

    if (this.framesDecoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.framesDecoded);
    }

    if (this.headerBytesReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.headerBytesReceived);
    }

    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.isRemote == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.isRemote);
    }

    if (this.jitter == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.jitter);
    }

    if (this.keyFramesDecoded == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.keyFramesDecoded);
    }

    if (this.lastPacketReceivedTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.lastPacketReceivedTimestamp);
    }

    out.writeEnum(this.mediaType.ordinal());

    if (this.nackCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.nackCount);
    }

    if (this.packetsLost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsLost);
    }

    if (this.packetsReceived == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.packetsReceived);
    }

    if (this.pliCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.pliCount);
    }

    if (this.qpSum == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.qpSum);
    }

    if (this.totalDecodeTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalDecodeTime);
    }

    if (this.totalInterFrameDelay == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalInterFrameDelay);
    }

    if (this.totalSquaredInterFrameDelay == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalSquaredInterFrameDelay);
    }

    if (this.trackId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.trackId);
    }

    if (this.transportId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.transportId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.mediaUnitId = null;
      } else {
        this.mediaUnitId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.callName = null;
      } else {
        this.callName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.userId = null;
      } else {
        this.userId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.browserId = null;
      } else {
        this.browserId = in.readString();
      }

      this.peerConnectionUUID = in.readString();

      this.ssrc = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.bytesReceived = null;
      } else {
        this.bytesReceived = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.codecId = null;
      } else {
        this.codecId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.decoderImplementation = null;
      } else {
        this.decoderImplementation = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.estimatedPlayoutTimestamp = null;
      } else {
        this.estimatedPlayoutTimestamp = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fecPacketsDiscarded = null;
      } else {
        this.fecPacketsDiscarded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fecPacketsReceived = null;
      } else {
        this.fecPacketsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.firCount = null;
      } else {
        this.firCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.framesDecoded = null;
      } else {
        this.framesDecoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.headerBytesReceived = null;
      } else {
        this.headerBytesReceived = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isRemote = null;
      } else {
        this.isRemote = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.jitter = null;
      } else {
        this.jitter = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyFramesDecoded = null;
      } else {
        this.keyFramesDecoded = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastPacketReceivedTimestamp = null;
      } else {
        this.lastPacketReceivedTimestamp = in.readDouble();
      }

      this.mediaType = org.observertc.webrtc.schemas.reports.MediaType.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.nackCount = null;
      } else {
        this.nackCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsLost = null;
      } else {
        this.packetsLost = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packetsReceived = null;
      } else {
        this.packetsReceived = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pliCount = null;
      } else {
        this.pliCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qpSum = null;
      } else {
        this.qpSum = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalDecodeTime = null;
      } else {
        this.totalDecodeTime = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalInterFrameDelay = null;
      } else {
        this.totalInterFrameDelay = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalSquaredInterFrameDelay = null;
      } else {
        this.totalSquaredInterFrameDelay = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.trackId = null;
      } else {
        this.trackId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.transportId = null;
      } else {
        this.transportId = in.readString();
      }

    } else {
      for (int i = 0; i < 31; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mediaUnitId = null;
          } else {
            this.mediaUnitId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.callName = null;
          } else {
            this.callName = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.userId = null;
          } else {
            this.userId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.browserId = null;
          } else {
            this.browserId = in.readString();
          }
          break;

        case 4:
          this.peerConnectionUUID = in.readString();
          break;

        case 5:
          this.ssrc = in.readLong();
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bytesReceived = null;
          } else {
            this.bytesReceived = in.readLong();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.codecId = null;
          } else {
            this.codecId = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.decoderImplementation = null;
          } else {
            this.decoderImplementation = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.estimatedPlayoutTimestamp = null;
          } else {
            this.estimatedPlayoutTimestamp = in.readDouble();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fecPacketsDiscarded = null;
          } else {
            this.fecPacketsDiscarded = in.readInt();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fecPacketsReceived = null;
          } else {
            this.fecPacketsReceived = in.readInt();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.firCount = null;
          } else {
            this.firCount = in.readInt();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.framesDecoded = null;
          } else {
            this.framesDecoded = in.readInt();
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.headerBytesReceived = null;
          } else {
            this.headerBytesReceived = in.readLong();
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isRemote = null;
          } else {
            this.isRemote = in.readBoolean();
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.jitter = null;
          } else {
            this.jitter = in.readDouble();
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyFramesDecoded = null;
          } else {
            this.keyFramesDecoded = in.readInt();
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastPacketReceivedTimestamp = null;
          } else {
            this.lastPacketReceivedTimestamp = in.readDouble();
          }
          break;

        case 20:
          this.mediaType = org.observertc.webrtc.schemas.reports.MediaType.values()[in.readEnum()];
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nackCount = null;
          } else {
            this.nackCount = in.readInt();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsLost = null;
          } else {
            this.packetsLost = in.readInt();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packetsReceived = null;
          } else {
            this.packetsReceived = in.readInt();
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pliCount = null;
          } else {
            this.pliCount = in.readInt();
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qpSum = null;
          } else {
            this.qpSum = in.readDouble();
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalDecodeTime = null;
          } else {
            this.totalDecodeTime = in.readDouble();
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalInterFrameDelay = null;
          } else {
            this.totalInterFrameDelay = in.readDouble();
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalSquaredInterFrameDelay = null;
          } else {
            this.totalSquaredInterFrameDelay = in.readDouble();
          }
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.trackId = null;
          } else {
            this.trackId = in.readString();
          }
          break;

        case 30:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transportId = null;
          } else {
            this.transportId = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










